global:
  localClusterDomain: apps.example.com
  secretStore:
    kind: ClusterSecretStore
    name: vault-backend
keycloak:
  defaultConfig: true
  defaultRealm:
    clients:
    - clientId: qtodo-app
      enabled: true
      name: qtodo
      protocol: openid-connect
      publicClient: false
      redirectUris:
      - '*'
      secret: ${QTODO_CLIENT_SECRET}
      standardFlowEnabled: true
      webOrigins:
      - +
    displayName: ZTVP Realm
    enabled: true
    realm: ztvp
    registrationAllowed: false
    roles:
      realm:
      - description: QTodo App Administrator
        name: qtodo-admin
      - description: Read-only access
        name: viewer
    users:
    - createdTimestamp: 1
      credentials:
      - temporary: true
        type: password
        value: ${QTODO_ADMIN_PASSWORD}
      email: qtodo-admin@example.com
      emailVerified: true
      enabled: true
      firstName: QTodo
      lastName: Admin
      realmRoles:
      - qtodo-admin
      requiredActions:
      - UPDATE_PASSWORD
      username: qtodo-admin
    - createdTimestamp: 1
      credentials:
      - temporary: true
        type: password
        value: ${QTODO_USER1_PASSWORD}
      email: qtodo-user1@example.com
      emailVerified: true
      enabled: true
      firstName: QTodo
      lastName: User-1
      realmRoles:
      - viewer
      requiredActions:
      - UPDATE_PASSWORD
      username: qtodo-user1
  ingress:
    enabled: true
    service: keycloak-service-trusted
    termination: reencrypt
  name: keycloak
  postgresqlDb:
    database: keycloak
    passwordVaultKey: secret/data/global/keycloak
    secretName: postgresql-db
    username: keycloak
  realms: []
  tls:
    secret: keycloak-tls
    serviceServing: true
  users:
    passwordVaultKey: secret/data/global/keycloak-users
    secretName: keycloak-users
